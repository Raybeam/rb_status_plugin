version: 2
jobs:
  build:
    docker:
    - image: circleci/python:3.6.2-stretch-browsers
    ports:
      -"8080"
      -"5432"
    steps:
    - checkout
    - restore_cache:
        keys:
          - rb-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - rb-dependencies-
    - run:
        command: |-
          python3 -m venv ~/.venv
          . ~/.venv/bin/activate
          pip3 install --upgrade pip
          pip3 install --upgrade apache-airflow
          pip3 install -r requirements.txt
        name: Setup venv
    - save_cache:
        paths:
          - ~/.venv
        key: rb-dependencies-{{ checksum "requirements.txt" }}
    - run:
        command: |-
          . ~/.venv/bin/activate
          flake8
        name: Run flake8 linter
    - run:
        command: |-
          . ~/.venv/bin/activate
          sudo apt-get update
          sudo apt-get install postgresql postgresql-contrib
          sudo sed -i 's~host    all             all             127.0.0.1/32            md5~host    all             all             0.0.0.0/0               trust~g' /etc/postgresql/$(ls /etc/postgresql)/main/pg_hba.conf
          sudo sed -i 's~local   all             postgres                                peer~local   all             postgres                                trust~g' /etc/postgresql/$(ls /etc/postgresql)/main/pg_hba.conf
          sudo service postgresql restart
          psql -U postgres -c "CREATE USER airflow PASSWORD 'password';"
          psql -U postgres -c "CREATE DATABASE airflow;"
          psql -U postgres -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO airflow;"
        name: Set up Postgres
    - run:
        command: |-
          . ~/.venv/bin/activate
          git clone https://github.com/Raybeam/rb_test_airflow /home/circleci/rb_test_airflow
        name: Clone rb_test_airflow
    - run:
        command: |-
          . ~/.venv/bin/activate
          cd /home/circleci/rb_test_airflow
          mkdir /home/circleci/rb_test_airflow/plugins/
          git clone https://github.com/Raybeam/rb_plugin_deploy /home/circleci/rb_test_airflow/plugins/rb_plugin_deploy
        name: Clone rb_plugin_deploy
    - run:
        command: |-
          . ~/.venv/bin/activate
          cd /home/circleci/rb_test_airflow
          cat /home/circleci/rb_test_airflow/plugins/rb_plugin_deploy/VERSIONS.md  | while read line || [[ -n $line ]];
          do
            if [[ $line =~ "["*"]"  ]]; then
              plugin_name=${line#*\[}
              plugin_name=${plugin_name%\]*}
              if [[ $plugin_name != ${CIRCLE_PROJECT_REPONAME} ]]; then
                git clone https://github.com/Raybeam/$plugin_name /home/circleci/rb_test_airflow/plugins/$plugin_name
                pip3 install -r /home/circleci/rb_test_airflow/plugins/$plugin_name/requirements.txt
                # if [[ -f "/home/circleci/rb_test_airflow/plugins/$plugin_name/bin/setup" ]]; then
                #   plugins/$plugin_name/bin/setup init
                # fi
              fi
            fi
          done
        name: Clone rb airflow plugins and install their requirements
    - run:
        command: |-
          . ~/.venv/bin/activate
          cd /home/circleci/rb_test_airflow
          cp -r /home/circleci/project/ /home/circleci/rb_test_airflow/plugins/${CIRCLE_PROJECT_REPONAME}
          pip3 install -r /home/circleci/rb_test_airflow/plugins/${CIRCLE_PROJECT_REPONAME}/requirements.txt
          plugins/${CIRCLE_PROJECT_REPONAME}/bin/setup init
          unset ret
          pytest  /home/circleci/rb_test_airflow/plugins/${CIRCLE_PROJECT_REPONAME}/tests/ -m "not compatibility" || ret=$?
              if [ -n "$ret" ]; then
                if ! [[ "05" =~ "$ret" ]]; then
                  exit "$ret"
                fi
              fi
        name: Run current plugin's unittests
    - run:
        command: |-
          . ~/.venv/bin/activate
          cd /home/circleci/rb_test_airflow
          export AIRFLOW_HOME=$PWD
          cp ~/project/.circleci/airflow.cfg $AIRFLOW_HOME/airflow.cfg
          echo "Attempting to initialize airflow..."
          airflow initdb &> /dev/null || true
          airflow initdb
          echo "Airflow initialized successfully."
          airflow create_user -r Admin -u admin -e admin@example.com -f admin -l user -p admin
          schedule_airflow="airflow scheduler"
          webserve_airflow="airflow webserver"
          echo -e "spinning up scheduler and webserver..."
          $schedule_airflow &
          $webserve_airflow &
          set -e
          cat /home/circleci/rb_test_airflow/plugins/rb_plugin_deploy/VERSIONS.md  | while read line || [[ -n $line ]];
          do
            if [[ $line =~ "["*"]"  ]]; then
              plugin_name=${line#*\[}
              plugin_name=${plugin_name%\]*}
              unset ret
              pytest /home/circleci/rb_test_airflow/plugins/$plugin_name/tests -m compatibility || ret=$?
              if [ -n "$ret" ]; then
                if ! [[ "05" =~ "$ret" ]]; then
                  exit "$ret"
                fi
              fi
            fi
          done
          pytest  /home/circleci/rb_test_airflow/plugins/${CIRCLE_PROJECT_REPONAME}/tests -m compatibility || ret=$?
          if [ -n "$ret" ]; then
            if ! [[ "05" =~ "$ret" ]]; then
              exit "$ret"
            fi
          fi
          set +e
        name: Start Airflow and run all plugins compatibility tests
    - run:
        command: |-
          echo "TRIGGERER: ${CIRCLE_USERNAME}"
          echo "BUILD_NUMBER: ${CIRCLE_BUILD_NUM}"
          echo "BUILD_URL: ${CIRCLE_BUILD_URL}"
          echo "BRANCH: ${CIRCLE_BRANCH}"
          echo "RUNNING JOB: ${CIRCLE_JOB}"
          echo "JOB PARALLELISM: ${CIRCLE_NODE_TOTAL}"
          echo "CIRCLE_REPOSITORY_URL: ${CIRCLE_REPOSITORY_URL}"
        name: Show some of the CircleCI runtime env vars
    - run:
        command: |-
          echo "uname:" $(uname -a)
          echo "arch: " $(arch)
        name: Show system information
  jsbuild:
    docker:
    - image: circleci/node:12
    steps:
    - checkout
    - restore_cache:
        keys:
          - rb-node-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - rb-node-dependencies-
    - run:
        command: npm ci
        name: Install Node dependencies
    - save_cache:
        paths:
          - node_modules
        key: rb-node-dependencies-{{ checksum "package.json" }}
    - run:
        command: npm run lint
        name: Run ESLint
    - run:
        command: npm run build
        name: Build JS for production
workflows:
  test:
    jobs:
    - build
    - jsbuild
  version: 2

